{"version":3,"sources":["../js/ng-awesome-table.js"],"names":[],"mappings":"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","file":"ng-awesome-table.js","sourcesContent":["'use strict';\nangular.module('ngAwesomeTable', [])\n    .directive('ngaTable', function() {\n        return {\n            restrict: 'A',\n            scope: {\n                model: '='\n            },\n\n            controller: ['$scope', '$filter', function($scope, $filter) {\n                // Copy the model to local scope so that it can be filtered without affecting the originating data\n                $scope.$watch('model', newVal => $scope.rows = newVal);\n                $scope.rows    = $scope.model;\n\n                // Make this directives isolated scope public to child directives\n                this.getScope  = () => $scope;\n\n                // Remember the all the field filters\n                this.filterObj = {};\n\n                /**\n                 * Applies any ngFilters to the model\n                 *\n                 * @param field\n                 *   The field name to filter over\n                 *\n                 * @param value\n                 *   The field value to filter over\n                 */\n                this.filter = (field, value) => {\n                    this.filterObj[field] = value;\n                    $scope.$apply(() => $scope.rows = $filter('filter')($scope.model, this.filterObj));\n                };\n\n                /**\n                 * Sorts the displayed model rows\n                 *\n                 * @param field\n                 *   The field name to sort over\n                 *\n                 * @param direction\n                 *   The direction to sort (true: descending, false: ascending)\n                 */\n                this.sort = (field, direction) =>\n                    $scope.$apply(() => $scope.rows = $filter('orderBy')($scope.rows, field, direction));\n            }]\n        }\n    })\n    .directive('ngaRow', ['$compile', function($compile) {\n        return {\n            restrict: 'A',\n            require:  '^^ngaTable',\n            link: function(scope, element, attributes, ctrl) {\n                // Create a new table row\n                let row = angular.element('<tr>');\n\n                // Apply attributes of the ngaRow to the new table row then convert the nga-row attribute to ng-repeat.\n                angular.forEach(attributes.$attr, (key, attribute) => {\n                    if (key == 'nga-row') {\n                        row.attr('ng-repeat', attributes[attribute] + ' in rows');\n                    } else {\n                        row.attr(key, attributes[attribute]);\n                    }\n                });\n\n                // Attach the row content to the new table row\n                let template = row.append(element.children());\n\n                // Compile the new row and attach it to the DOM\n                element.parent().append($compile(template)(ctrl.getScope()));\n            }\n        }\n    }])\n    .directive('ngaFilter', function() {\n        return {\n            restrict: 'A',\n            require:  '^^ngaTable',\n            link: function(scope, element, attributes, ctrl) {\n                // Create a new text input to contain the filter\n                let input = angular.element('<input type=\"text\"/>').addClass('nga-filter');\n\n                // Attach a filter listener to keyup on the new text input\n                input.keyup(event => ctrl.filter(attributes.ngaFilter, event.target.value));\n                element.append(input);\n            }\n        }\n    })\n    .directive('ngaSort', function() {\n        return {\n            restrict: 'A',\n            require:  '^^ngaTable',\n            link: function(scope, element, attributes, ctrl) {\n                let sorter = angular.element('<span>').addClass('nga-sorter').addClass('nga-sorter-ascending'),\n                    classes = ['nga-sorter-ascending', 'nga-sorter-descending'];\n\n                sorter.click(function() {\n                    sorter.data('direction', !sorter.data('direction'));\n                    let direction = sorter.data('direction');\n\n                    ctrl.sort(attributes.ngaSort, direction);\n\n                    $('.nga-sorter')\n                        .removeClass(classes.join(' '))\n                        .addClass('nga-sorter-ascending');\n\n                    sorter.removeClass(classes.join(' '));\n                    sorter.addClass(classes[+direction])\n                });\n\n                element.append(sorter);\n            }\n        }\n    })\n;\n"]}