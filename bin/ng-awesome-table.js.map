{"version":3,"sources":["../js/ng-awesome-table.js"],"names":[],"mappings":"AAAA;;AACA,QAAQ,MAAR,CAAe,gBAAf,EAAiC,EAAjC,EACK,SADL,CACe,UADf,EAC2B,YAAW;AAC9B,WAAO;AACH,kBAAU,GAAV;AACA,cAAM,cAAS,KAAT,EAAgB,OAAhB,EAAyB,UAAzB,EAAqC,IAArC,EAA2C;AAC7C,kBAAM,KAAN,GAAc,WAAW,QAAX;;;AAD+B,gBAIzC,WAAW,WAAX,EAAwB;AACxB,oBAAI,YAAY,QAAQ,OAAR,CAAgB,oFAAhB,CAAZ,CADoB;AAExB,0BAAU,IAAV,CAAe,gBAAf,EAAiC,KAAjC,CAAuC;2BAAM,KAAK,QAAL,CAAc,GAAd;iBAAN,CAAvC,CAFwB;AAGxB,0BAAU,IAAV,CAAe,gBAAf,EAAiC,KAAjC,CAAuC;2BAAM,KAAK,QAAL,CAAc,GAAd;iBAAN,CAAvC,CAHwB;;AAKxB,wBAAQ,MAAR,CAAe,SAAf,EALwB;;AAOxB,sBAAM,mBAAN,GAA4B,WAAW,WAAX,CAPJ;AAQxB,sBAAM,mBAAN,GAA4B,CAA5B,CARwB;aAA5B;SAJE;AAeN,oBAAY,CAAC,QAAD,EAAW,SAAX,EAAsB,UAAtB,EAAkC,QAAlC,EAA4C,UAAS,MAAT,EAAiB,OAAjB,EAA0B,QAA1B,EAAoC,MAApC,EAA4C;;;;AAEhG,mBAAO,MAAP,CACI;uBAAM,OAAO,OAAO,KAAP,CAAP,CAAqB,MAArB;aAAN,EACA,kBAAU;AACN,sBAAK,YAAL,GAAoB,MAApB,CADM;AAEN,uBAAO,IAAP,GAAc,MAAd,CAFM;AAGN,sBAAK,WAAL,CAAiB,EAAjB,EAHM;aAAV,CAFJ,CAFgG;;AAUhG,mBAAO,IAAP,GAAc,OAAO,KAAP;;;AAVkF,gBAahG,CAAK,QAAL,GAAiB;uBAAM;aAAN;;;;;;;;;;;AAb+E,gBAwBhG,CAAK,SAAL,GAAiB,EAAjB,CAxBgG;AAyBhG,iBAAK,MAAL,GAAc,UAAC,KAAD,EAAQ,KAAR,EAAkB;AAC5B,oBAAI,UAAU,EAAV,EAAc;AACd,2BAAO,MAAK,SAAL,CAAe,KAAf,CAAP,CADc;iBAAlB,MAEO;AACH,0BAAK,SAAL,CAAe,KAAf,IAAwB,KAAxB,CADG;iBAFP;;AAMA,sBAAK,WAAL,CAAiB;AACb,4BAAQ,MAAK,SAAL;iBADZ,EAP4B;aAAlB;;;;;;;;;;;AAzBkF,gBA8ChG,CAAK,IAAL,GAAY,UAAC,KAAD,EAAQ,SAAR,EAAsB;AAC9B,sBAAK,WAAL,CAAiB;AACb,0BAAM,EAAC,YAAD,EAAQ,oBAAR,EAAN;iBADJ,EAD8B;aAAtB;;;;;;;;;;;AA9CoF,gBA6DhG,CAAK,QAAL,GAAgB,UAAC,IAAD,EAAU;AACtB,wBAAO,IAAP;AACI,yBAAK,GAAL;AAAU,+BAAO,mBAAP,GAAV;AADJ,yBAES,GAAL;AAAU,+BAAO,mBAAP,GAA6B,KAAK,GAAL,CAAS,OAAO,mBAAP,GAA2B,CAA3B,EAA8B,CAAvC,CAA7B,CAAV;AAFJ;AAGc,+BAAO,mBAAP,GAA6B,IAA7B,CAAV;AAHJ,iBADsB;;AAOtB,sBAAK,WAAL,CAAiB;AACb,8BAAU;AACN,8BAAQ,OAAO,mBAAP;AACR,gCAAQ,OAAO,mBAAP,IAA8B,OAAO,mBAAP,GAA6B,CAA7B,CAA9B;qBAFZ;iBADJ,EAPsB;aAAV;;;;;;;;;AA7DgF,gBAmFhG,CAAK,OAAL,GAAe;AACX,wBAAU,EAAV;AACA,sBAAU,EAAC,OAAO,EAAP,EAAW,WAAW,CAAX,EAAtB;AACA,0BAAU,EAAC,MAAM,OAAO,mBAAP,EAA4B,QAAQ,CAAR,EAA7C;aAHJ,CAnFgG;AAwFhG,iBAAK,WAAL,GAAmB,kBAAU;AACzB,wBAAQ,MAAR,CAAe,MAAK,OAAL,EAAc,MAA7B,EADyB;AAEzB,oBAAI,OAAO,QAAQ,QAAR,EAAkB,MAAK,YAAL,EAAmB,MAAK,OAAL,CAAa,MAAb,CAA5C,CAFqB;AAGzB,uBAAO,QAAQ,SAAR,EAAmB,IAAnB,EAAyB,OAAO,mBAAP,EAA4B,MAAK,OAAL,CAAa,QAAb,CAAsB,MAAtB,CAA5D,CAHyB;AAIzB,uBAAO,QAAQ,SAAR,EACH,IADG,EAEH;2BAAO,IAAI,MAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB,CAAJ,GAA+B,IAAI,MAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB,CAAnC,GAA8D,CAAC,CAAD;iBAArE;AACA,sBAAK,OAAL,CAAa,IAAb,CAAkB,SAAlB,CAHJ,CAJyB;;AAUzB,yBAAS;2BAAM,OAAO,IAAP,GAAc,IAAd;iBAAN,CAAT,CAVyB;aAAV,CAxF6E;SAA5C,CAAxD;KAjBJ,CAD8B;CAAX,CAD3B,CA0HK,SA1HL,CA0He,QA1Hf,EA0HyB,CAAC,UAAD,EAAa,UAAS,QAAT,EAAmB;AACjD,WAAO;AACH,kBAAU,GAAV;AACA,iBAAU,YAAV;AACA,cAAM,cAAS,KAAT,EAAgB,OAAhB,EAAyB,UAAzB,EAAqC,IAArC,EAA2C;;AAE7C,gBAAI,MAAM,QAAQ,OAAR,CAAgB,MAAhB,CAAN;;;AAFyC,mBAK7C,CAAQ,OAAR,CAAgB,WAAW,KAAX,EAAkB,UAAC,GAAD,EAAM,SAAN,EAAoB;AAClD,oBAAI,OAAO,SAAP,EAAkB;AAClB,wBAAI,IAAJ,CAAS,WAAT,EAAsB,WAAW,SAAX,IAAwB,UAAxB,CAAtB,CADkB;iBAAtB,MAEO;AACH,wBAAI,IAAJ,CAAS,GAAT,EAAc,WAAW,SAAX,CAAd,EADG;iBAFP;aAD8B,CAAlC;;;AAL6C,gBAczC,WAAW,IAAI,MAAJ,CAAW,QAAQ,QAAR,EAAX,CAAX;;;AAdyC,mBAiB7C,CAAQ,MAAR,GAAiB,MAAjB,CAAwB,SAAS,QAAT,EAAmB,KAAK,QAAL,EAAnB,CAAxB,EAjB6C;SAA3C;KAHV,CADiD;CAAnB,CA1HtC,EAmJK,SAnJL,CAmJe,WAnJf,EAmJ4B,YAAW;AAC/B,WAAO;AACH,kBAAU,GAAV;AACA,iBAAU,YAAV;AACA,cAAM,cAAS,KAAT,EAAgB,OAAhB,EAAyB,UAAzB,EAAqC,IAArC,EAA2C;;AAE7C,gBAAI,QAAQ,QAAQ,OAAR,CAAgB,sBAAhB,EAAwC,QAAxC,CAAiD,YAAjD,CAAR;;;AAFyC,iBAK7C,CAAM,KAAN,CAAY;uBAAS,KAAK,MAAL,CAAY,WAAW,SAAX,EAAsB,MAAM,MAAN,CAAa,KAAb;aAA3C,CAAZ,CAL6C;AAM7C,oBAAQ,MAAR,CAAe,KAAf,EAN6C;SAA3C;KAHV,CAD+B;CAAX,CAnJ5B,CAiKK,SAjKL,CAiKe,SAjKf,EAiK0B,YAAW;AAC7B,WAAO;AACH,kBAAU,GAAV;AACA,iBAAU,YAAV;AACA,cAAM,cAAS,KAAT,EAAgB,OAAhB,EAAyB,UAAzB,EAAqC,IAArC,EAA2C;AAC7C,gBAAI,SAAS,QAAQ,OAAR,CAAgB,QAAhB,EAA0B,QAA1B,CAAmC,YAAnC,EAAiD,QAAjD,CAA0D,sBAA1D,CAAT;gBACA,UAAU,CAAC,sBAAD,EAAyB,uBAAzB,CAAV,CAFyC;;AAI7C,mBAAO,KAAP,CAAa,YAAW;AACpB,uBAAO,IAAP,CAAY,WAAZ,EAAyB,CAAC,OAAO,IAAP,CAAY,WAAZ,CAAD,CAAzB,CADoB;AAEpB,oBAAI,YAAY,OAAO,IAAP,CAAY,WAAZ,CAAZ,CAFgB;;AAIpB,qBAAK,IAAL,CAAU,WAAW,OAAX,EAAoB,SAA9B,EAJoB;;AAMpB,kBAAE,aAAF,EACK,WADL,CACiB,QAAQ,IAAR,CAAa,GAAb,CADjB,EAEK,QAFL,CAEc,sBAFd,EANoB;;AAUpB,uBAAO,WAAP,CAAmB,QAAQ,IAAR,CAAa,GAAb,CAAnB,EAVoB;AAWpB,uBAAO,QAAP,CAAgB,QAAQ,CAAC,SAAD,CAAxB,EAXoB;aAAX,CAAb,CAJ6C;;AAkB7C,oBAAQ,MAAR,CAAe,MAAf,EAlB6C;SAA3C;KAHV,CAD6B;CAAX,CAjK1B","file":"ng-awesome-table.js","sourcesContent":["'use strict';\nangular.module('ngAwesomeTable', [])\n    .directive('ngaTable', function() {\n        return {\n            restrict: 'A',\n            link: function(scope, element, attributes, ctrl) {\n                scope.model = attributes.ngaModel;\n\n                // Setup pagination control if nga-paginate is set\n                if (attributes.ngaPaginate) {\n                    let paginater = angular.element('<div><span class=\"nga-prev-page\"></span> <span class=\"nga-next-page\"></span></div>');\n                    paginater.find('.nga-prev-page').click(() => ctrl.paginate('-'));\n                    paginater.find('.nga-next-page').click(() => ctrl.paginate('+'));\n\n                    element.append(paginater);\n\n                    scope.paginateRowsPerPage = attributes.ngaPaginate;\n                    scope.paginateCurrentPage = 1;\n                }\n            },\n            controller: ['$scope', '$filter', '$timeout', '$parse', function($scope, $filter, $timeout, $parse) {\n                // Watch the model\n                $scope.$watch(\n                    () => $parse($scope.model)($scope),\n                    newVal => {\n                        this.originalRows = newVal;\n                        $scope.rows = newVal;\n                        this.applyFilter({});\n                    });\n\n                $scope.rows = $scope.model;\n\n                // Make this directive's isolated scope public to its children\n                this.getScope  = () => $scope;\n\n                /**\n                 * Applies any ngFilters to the model\n                 *\n                 * @param field\n                 *   The field name to filter over\n                 *\n                 * @param value\n                 *   The field value to filter over\n                 */\n                this.filterObj = {};\n                this.filter = (field, value) => {\n                    if (value === '') {\n                        delete this.filterObj[field];\n                    } else {\n                        this.filterObj[field] = value;\n                    }\n\n                    this.applyFilter({\n                        filter: this.filterObj\n                    });\n                };\n\n                /**\n                 * Sorts the displayed model rows\n                 *\n                 * @param field\n                 *   The field name to sort over\n                 *\n                 * @param direction\n                 *   The direction to sort (true: descending, false: ascending)\n                 */\n                this.sort = (field, direction) => {\n                    this.applyFilter({\n                        sort: {field, direction}\n                    });\n                };\n\n                /**\n                 * Filters out rows that are outside of the current page\n                 *\n                 * @param page\n                 *   The page to flip to.\n                 *   '+': The next page\n                 *   '-': The previous page\n                 *   n:   A specific page\n                 */\n                this.paginate = (page) => {\n                    switch(page) {\n                        case '+': $scope.paginateCurrentPage++; break; //TODO Dont go past last page\n                        case '-': $scope.paginateCurrentPage = Math.max($scope.paginateCurrentPage-1, 1); break;\n                        default:  $scope.paginateCurrentPage = page; break;\n                    }\n\n                    this.applyFilter({\n                        paginate: {\n                            rows:   $scope.paginateRowsPerPage,\n                            offset: $scope.paginateRowsPerPage * ($scope.paginateCurrentPage - 1)\n                        }\n                    });\n                };\n\n                /**\n                 * Applies a new filter to the current list of filters, then runs them in order.\n                 * Filter order is filter, sort, then paginate.\n                 *\n                 * @param filter\n                 *   The filter object to apply.  The object structure is {filterName: {parameters}}\n                 */\n                this.filters = {\n                    filter:   {},\n                    sort:     {field: '', direction: 1},\n                    paginate: {rows: $scope.paginateRowsPerPage, offset: 0}\n                };\n                this.applyFilter = filter => {\n                    angular.extend(this.filters, filter);\n                    let rows = $filter('filter')(this.originalRows, this.filters.filter);\n                    rows = $filter('limitTo')(rows, $scope.paginateRowsPerPage, this.filters.paginate.offset);\n                    rows = $filter('orderBy')(\n                        rows,\n                        row => row[this.filters.sort.field] ? row[this.filters.sort.field] : -1, // Otherwise we'd get nulls between M and O like ['Mike', null, 'Other']\n                        this.filters.sort.direction\n                    );\n\n                    $timeout(() => $scope.rows = rows);\n                };\n            }]\n        }\n    })\n    .directive('ngaRow', ['$compile', function($compile) {\n        return {\n            restrict: 'A',\n            require:  '^^ngaTable',\n            link: function(scope, element, attributes, ctrl) {\n                // Create a new table row\n                let row = angular.element('<tr>');\n\n                // Apply attributes of the ngaRow to the new table row then convert the nga-row attribute to ng-repeat.\n                angular.forEach(attributes.$attr, (key, attribute) => {\n                    if (key == 'nga-row') {\n                        row.attr('ng-repeat', attributes[attribute] + ' in rows');\n                    } else {\n                        row.attr(key, attributes[attribute]);\n                    }\n                });\n\n                // Attach the row content to the new table row\n                let template = row.append(element.children());\n\n                // Compile the new row and attach it to the DOM\n                element.parent().append($compile(template)(ctrl.getScope()));\n            }\n        }\n    }])\n    .directive('ngaFilter', function() {\n        return {\n            restrict: 'A',\n            require:  '^^ngaTable',\n            link: function(scope, element, attributes, ctrl) {\n                // Create a new text input to contain the filter\n                let input = angular.element('<input type=\"text\"/>').addClass('nga-filter');\n\n                // Attach a filter listener to keyup on the new text input\n                input.keyup(event => ctrl.filter(attributes.ngaFilter, event.target.value));\n                element.append(input);\n            }\n        }\n    })\n    .directive('ngaSort', function() {\n        return {\n            restrict: 'A',\n            require:  '^^ngaTable',\n            link: function(scope, element, attributes, ctrl) {\n                let sorter = angular.element('<span>').addClass('nga-sorter').addClass('nga-sorter-ascending'),\n                    classes = ['nga-sorter-ascending', 'nga-sorter-descending'];\n\n                sorter.click(function() {\n                    sorter.data('direction', !sorter.data('direction'));\n                    let direction = sorter.data('direction');\n\n                    ctrl.sort(attributes.ngaSort, direction);\n\n                    $('.nga-sorter')\n                        .removeClass(classes.join(' '))\n                        .addClass('nga-sorter-ascending');\n\n                    sorter.removeClass(classes.join(' '));\n                    sorter.addClass(classes[+direction])\n                });\n\n                element.append(sorter);\n            }\n        }\n    })\n;\n"]}